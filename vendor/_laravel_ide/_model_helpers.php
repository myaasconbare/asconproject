<?php

namespace App\Models {

    /**
     * App\Models\Trade
     *
     * @property \Illuminate\Support\Carbon|null $deleted_at
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array|null $meta
     * @property enum('running','complete') $status
     * @property enum('initiated','win','lose','draw') $outcome
     * @property enum('1','0') $volume
     * @property enum('practice','trade') $type
     * @property \Illuminate\Support\Carbon|null $arrival_time
     * @property string|null $period
     * @property int|null $duration
     * @property decimal(28,8) $amount
     * @property decimal(28,8) $winning_amount
     * @property decimal(28,8) $original_price
     * @property int $crypto_currency_id
     * @property string $user_id
     * @property int $id
     * @property-read mixed $volume_label
     * @property-read mixed $status_color
     * @property-read mixed $is_high_win_type
     * @property-read mixed $amount_label
     * @property-read mixed $is_win
     * @property-read mixed $profit
     * @property-read mixed $is_draw
     * @property-read mixed $outcome_color
     * @property-read mixed $amount_color
     * @property-read \App\Models\Transaction $transaction
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
     * @property-read int|null $transactions_count
     * @property-read \App\Models\User $user
     * @property-read \App\Models\CryptoCurrency $cryptoCurrency
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereCryptoCurrencyId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereOriginalPrice($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereWinningAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade wherePeriod($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereArrivalTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereVolume($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereOutcome($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereMeta($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade today()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade onDate()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade highRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade lowRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade winRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade lossRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade drawRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade practice()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade real()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade useSearch()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade query()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Trade cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Trade|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Trade extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TradeDuration
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('seconds','minutes','hours') $period
     * @property int $duration
     * @property bool $is_active
     * @property int $id
     * @property-read mixed $period_label
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration wherePeriod($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration query()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration clone()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeDuration|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TradeDuration extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\StakingInvestment
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon|null $completed_at
     * @property \Illuminate\Support\Carbon|null $paused_at
     * @property \Illuminate\Support\Carbon|null $expires_at
     * @property \Illuminate\Support\Carbon|null $last_interest_date
     * @property \Illuminate\Support\Carbon|null $next_interest_date
     * @property enum('running','paused','completed') $status
     * @property decimal(8,2)|null $total_return
     * @property decimal(20,2) $interest
     * @property decimal(20,2) $amount
     * @property int|null $staking_plan_id
     * @property string $user_id
     * @property int $id
     * @property-read mixed $initiated_at
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StakingProfit> $profits
     * @property-read int|null $profits_count
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereStakingPlanId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereInterest($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereTotalReturn($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNextInterestDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereLastInterestDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereExpiresAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment wherePausedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereCompletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment running()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment query()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment clone()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingInvestment|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class StakingInvestment extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\StakingPlan
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('hours','days') $period
     * @property decimal(20,2) $maximum_amount
     * @property decimal(20,2) $minimum_amount
     * @property decimal(20,2) $interest_rate
     * @property string $duration
     * @property int $id
     * @property-read mixed $duration_label
     * @property-read mixed $period_label
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereMinimumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereMaximumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan wherePeriod($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan query()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan clone()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingPlan|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class StakingPlan extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Investment
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon $upcoming_payment
     * @property \Illuminate\Support\Carbon|null $last_payment
     * @property enum('active','paused','completed','ended','terminated','pending_termination') $status
     * @property int $minutes_remaining
     * @property int $total_minutes
     * @property int $run_times
     * @property string $interests_received
     * @property decimal(20,2) $amount
     * @property string $transaction_id
     * @property decimal(20,2)|null $maximum_interest_rate
     * @property decimal(20,2)|null $minimum_interest_rate
     * @property string|null $profitability_percentage
     * @property int $license_id
     * @property string $reference_id
     * @property string $user_id
     * @property int $id
     * @property-read mixed $active_interest_rate
     * @property-read mixed $status_label
     * @property-read mixed $status_color
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\InvestmentDeactivation> $deactivations
     * @property-read int|null $deactivations_count
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Profit> $profits
     * @property-read int|null $profits_count
     * @property-read \App\Models\License $license
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereReferenceId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereLicenseId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereProfitabilityPercentage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereMinimumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereMaximumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereInterestsReceived($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereRunTimes($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereTotalMinutes($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereMinutesRemaining($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereLastPayment($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereUpcomingPayment($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment active()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment pendingDeactivation()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment completed()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment useSearch()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment query()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Investment cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Investment|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Investment extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\License
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property decimal(20,2)|null $interest_rate
     * @property decimal(20,2)|null $maximum_interest_rate
     * @property decimal(20,2)|null $minimum_interest_rate
     * @property decimal(20,2)|null $amount
     * @property decimal(20,2)|null $maximum_amount
     * @property decimal(20,2)|null $minimum_amount
     * @property bool $is_unlimited
     * @property bool $is_fixed_interest
     * @property bool $is_fixed_amount
     * @property int $portfolio_id
     * @property int $id
     * @property-read mixed $maximum_amount_label
     * @property-read mixed $maximum_amount_format
     * @property-read mixed $name
     * @property-read mixed $minimum_amount_format
     * @property-read mixed $period_label
     * @property-read mixed $features_trim
     * @property-read mixed $rate
     * @property-read mixed $up_coming_payment
     * @property-read \App\Models\Portfolio $portfolio
     * @method static \Illuminate\Database\Eloquent\Builder|License whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License wherePortfolioId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIsFixedAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIsFixedInterest($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIsUnlimited($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereMinimumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereMaximumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereMinimumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereMaximumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|License newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|License newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|License query()
     * @method static \Illuminate\Database\Eloquent\Builder|License select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|License selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|License selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|License fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|License from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|License useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|License forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|License ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|License join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|License joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|License joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|License joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|License leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|License leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|License mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|License addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|License addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|License groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|License havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|License orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|License orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|License orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|License skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|License forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|License reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|License union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|License unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|License lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|License sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|License beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|License afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|License setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|License addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|License mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|License useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|License clone()
     * @method static \Illuminate\Database\Eloquent\Builder|License cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|License cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|License dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|License dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|License tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|License|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|License|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class License extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Portfolio
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $terms
     * @property array|null $features
     * @property enum('hours','days') $period
     * @property int $duration
     * @property bool $is_recommended
     * @property int|null $sort
     * @property bool $is_active
     * @property string $name
     * @property int $id
     * @property-read mixed $least_plan
     * @property-read mixed $max_plan
     * @property-read mixed $period_label
     * @property-read mixed $minimum_amount
     * @property-read mixed $maximum_amount
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\License> $licenses
     * @property-read int|null $licenses_count
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereSort($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereIsRecommended($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio wherePeriod($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereFeatures($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereTerms($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio query()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Portfolio|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Portfolio extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\InvestmentDeactivation
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon|null $cancelled_at
     * @property \Illuminate\Support\Carbon|null $declined_at
     * @property \Illuminate\Support\Carbon|null $approved_at
     * @property enum('pending','approved','declined','cancelled') $status
     * @property string $amount
     * @property int $investment_id
     * @property string $transaction_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @property-read \App\Models\License $license
     * @property-read \App\Models\Investment $investment
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereInvestmentId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereApprovedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereDeclinedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereCancelledAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation pending()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation query()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation clone()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentDeactivation|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class InvestmentDeactivation extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Admin
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $remember_token
     * @property \Illuminate\Support\Carbon|null $deleted_at
     * @property string $password
     * @property string $email
     * @property string $name
     * @property int $id
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
     * @property-read int|null $notifications_count
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin wherePassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereRememberToken($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin query()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Admin cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Admin|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Admin extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\BatchCommission
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property double $percentage
     * @property int $level
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission wherePercentage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission query()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission clone()
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|BatchCommission|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class BatchCommission extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Commission
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('level','referral','investment','deposit') $type
     * @property string $details
     * @property decimal(20,2) $amount
     * @property decimal(20,2) $post_balance
     * @property decimal(20,2) $pre_balance
     * @property string $transaction_id
     * @property string $from_user_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @property-read \App\Models\User $fromUser
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereFromUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission wherePreBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission wherePostBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission query()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Commission cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Commission|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Commission extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\CryptoCurrency
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array|null $meta
     * @property bool|null $top_loser
     * @property bool|null $top_gainer
     * @property bool $is_active
     * @property string $symbol
     * @property string|null $image
     * @property string $crypto_id
     * @property string $pair
     * @property string $name
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency wherePair($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereCryptoId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereImage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereSymbol($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereTopGainer($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereTopLoser($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereMeta($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency active()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency topGainers()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency topLosers()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency query()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency clone()
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|CryptoCurrency|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class CryptoCurrency extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Deposit
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon|null $deleted_at
     * @property enum('pending','approved','completed','declined','processing','partially_paid') $status
     * @property decimal(20,2) $charge
     * @property decimal(20,2) $amount
     * @property string $transaction_id
     * @property string|null $sender_wallet_address
     * @property string|null $destination_wallet_address
     * @property string|null $pay_amount
     * @property string|null $network
     * @property string|null $currency
     * @property string $user_id
     * @property int $id
     * @property-read mixed $currency_label
     * @property-read mixed $initiated_at
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereCurrency($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNetwork($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit wherePayAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereDestinationWalletAddress($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereSenderWalletAddress($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereCharge($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit useSearch()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit query()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Deposit|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Deposit extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\InvestmentPlan
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $terms
     * @property array|null $features
     * @property enum('hours','days') $period
     * @property int $duration
     * @property decimal(20,2) $maximum_interest_rate
     * @property decimal(20,2) $minimum_interest_rate
     * @property decimal(20,2)|null $amount
     * @property decimal(20,2)|null $maximum_amount
     * @property decimal(20,2)|null $minimum_amount
     * @property bool $is_unlimited
     * @property bool $is_fixed
     * @property bool $is_recommended
     * @property bool $is_active
     * @property string $name
     * @property int $id
     * @property-read mixed $maximum_amount_label
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIsRecommended($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIsFixed($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIsUnlimited($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereMinimumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereMaximumAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereMinimumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereMaximumInterestRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan wherePeriod($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereFeatures($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereTerms($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan query()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan clone()
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|InvestmentPlan|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class InvestmentPlan extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\MatrixEnrollment
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array|null $meta
     * @property enum('running','closed') $status
     * @property decimal(20,2) $level_commission
     * @property decimal(20,2) $referral_commission
     * @property decimal(20,2) $amount
     * @property string $transaction_id
     * @property int $matrix_plan_id
     * @property string $user_id
     * @property int $id
     * @property-read mixed $initiated_at
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @property-read \App\Models\MatrixPlan $plan
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereMatrixPlanId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereReferralCommission($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereLevelCommission($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereMeta($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment query()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment clone()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixEnrollment|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class MatrixEnrollment extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\MatrixPlan
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array $commission
     * @property bool $is_recommended
     * @property bool $is_active
     * @property decimal(20,2) $referral_reward
     * @property decimal(20,2) $amount
     * @property string $name
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereReferralReward($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereIsRecommended($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereCommission($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan withActive()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan query()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan clone()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixPlan|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class MatrixPlan extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\MatrixSetting
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string $width
     * @property string $height
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereHeight($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereWidth($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting query()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting clone()
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|MatrixSetting|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class MatrixSetting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\NotificationSetting
     *
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting query()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting clone()
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|NotificationSetting|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class NotificationSetting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Profit
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('minutely','daily') $type
     * @property string|null $details
     * @property string|null $post_balance
     * @property string|null $pre_balance
     * @property string $amount
     * @property int|null $license_id
     * @property int|null $portfolio_id
     * @property int $investment_id
     * @property string $user_id
     * @property string $transaction_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereInvestmentId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit wherePortfolioId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereLicenseId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit wherePreBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit wherePostBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit today()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit onDate()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit query()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Profit cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Profit|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Profit extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\RechargePin
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon|null $used_at
     * @property string $number
     * @property decimal(20,8) $amount
     * @property string|null $details
     * @property string $user_id
     * @property int $id
     * @property-read mixed $status
     * @property-read mixed $status_color
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNumber($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereUsedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin query()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin clone()
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|RechargePin|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class RechargePin extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Referral
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property int $level
     * @property string $referred_user_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\User $referred
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereReferredUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral level()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral query()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Referral cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Referral|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Referral extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferralCommission
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property double $percentage
     * @property int $level
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission wherePercentage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission query()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission clone()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralCommission|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferralCommission extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferralSetting
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting query()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting clone()
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|ReferralSetting|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferralSetting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\RewardBadge
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bool $is_active
     * @property decimal(20,2) $reward
     * @property int $minimum_referral_count
     * @property decimal(20,2) $minimum_deposit
     * @property decimal(20,2) $minimum_team_invest
     * @property decimal(20,2) $minimum_invest
     * @property string $name
     * @property int $level
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereMinimumInvest($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereMinimumTeamInvest($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereMinimumDeposit($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereMinimumReferralCount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereReward($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge withActive()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge query()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge clone()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadge|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class RewardBadge extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\RewardBadgeHistory
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $total_weekly_earning
     * @property string|null $total_daily_earning
     * @property string|null $reward
     * @property int $reward_badge_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereRewardBadgeId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereReward($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereTotalDailyEarning($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereTotalWeeklyEarning($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory query()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory clone()
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|RewardBadgeHistory|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class RewardBadgeHistory extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Setting
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $profitability_percentage
     * @property string|null $min_deposit
     * @property string|null $deposit_api_key
     * @property int|null $referral_level
     * @property int $id
     * @property-read mixed $default_profitablity_percentage
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereReferralLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereDepositApiKey($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereMinDeposit($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereProfitabilityPercentage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting query()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Setting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Setting|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Setting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\StakingDuration
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration query()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration clone()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingDuration|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class StakingDuration extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\StakingProfit
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('minutely','daily') $type
     * @property string|null $details
     * @property string|null $post_balance
     * @property string|null $pre_balance
     * @property string $amount
     * @property int $staking_investment_id
     * @property string $user_id
     * @property string $transaction_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereStakingInvestmentId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit wherePreBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit wherePostBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit query()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit clone()
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|StakingProfit|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class StakingProfit extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TeamCommission
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bool $is_all_level
     * @property decimal(20,2) $reward
     * @property int|null $level_range_end
     * @property int|null $level_range_start
     * @property decimal(20,2) $volume
     * @property int $id
     * @property-read mixed $range
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereVolume($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereLevelRangeStart($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereLevelRangeEnd($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereReward($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereIsAllLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission query()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission clone()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamCommission|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TeamCommission extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TeamReward
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array|null $meta
     * @property string|null $details
     * @property string $total_team_volume
     * @property string $team_volume_at_level
     * @property string $reward
     * @property int|null $team_commission_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
     * @property-read int|null $transactions_count
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereTeamCommissionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereReward($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereTeamVolumeAtLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereTotalTeamVolume($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereMeta($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward query()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward clone()
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|TeamReward|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TeamReward extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TradeCopy
     *
     * @property-read mixed $volume_label
     * @property-read mixed $status_color
     * @property-read mixed $outcome_color
     * @property-read mixed $amount_color
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @property-read \App\Models\CryptoCurrency $cryptoCurrency
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy today()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy onDate()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy highRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy lowRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy winRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy lossRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy drawRecords()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy query()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy clone()
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|TradeCopy|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TradeCopy extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Transaction
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $transactionable_type
     * @property string|null $transactionable_id
     * @property string|null $details
     * @property enum('all','MATRIX','INVESTMENT','TRADE') $source
     * @property enum('deposit_wallet','interest_wallet','residual_wallet','trade_wallet','trade_practice_wallet') $wallet_type
     * @property enum('1','0') $type
     * @property decimal(28,8) $charge
     * @property decimal(28,8) $post_balance
     * @property decimal(28,8) $pre_balance
     * @property decimal(28,8) $amount
     * @property string $transaction_id
     * @property string $user_id
     * @property int $id
     * @property-read mixed $status_color
     * @property-read mixed $post_balance_label
     * @property-read mixed $wallet_type_label
     * @property-read mixed $initiated_at
     * @property-read \App\Models\User $user
     * @property-read \App\Models\Transaction $transactionable
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction wherePreBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction wherePostBalance($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereCharge($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereWalletType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereSource($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereTransactionableId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereTransactionableType($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction withoutDeleted()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction useSearch()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction query()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Transaction|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Transaction extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\VerificationToken
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bool $is_expired
     * @property \Illuminate\Support\Carbon|null $expires_at
     * @property string $code
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereExpiresAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereIsExpired($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken query()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken clone()
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|VerificationToken|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class VerificationToken extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\WalletTopUp
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property enum('deposit_wallet','trade_wallet') $to_wallet
     * @property enum('deposit_wallet','trade_wallet') $from_wallet
     * @property string $user_id
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereFromWallet($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereToWallet($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp query()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp clone()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUp|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class WalletTopUp extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\WalletTopUpLog
     *
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog query()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog clone()
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|WalletTopUpLog|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class WalletTopUpLog extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Withdrawal
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property array|null $payment_information
     * @property enum('pending','approved','declined','cancelled') $status
     * @property string $user_wallet_address
     * @property enum('deposit_wallet','interest_wallet','residual_wallet') $wallet
     * @property decimal(20,2) $charge
     * @property decimal(8,2)|null $final_amount
     * @property decimal(20,2) $amount
     * @property string $transaction_id
     * @property string|null $currency_name
     * @property int|null $withdrawal_currency_id
     * @property string $user_id
     * @property int $id
     * @property-read \App\Models\Transaction $transaction
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereWithdrawalCurrencyId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereCurrencyName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereTransactionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereFinalAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereCharge($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereWallet($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereUserWalletAddress($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal wherePaymentInformation($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal byActiveUser()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal pending()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal declined()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal approved()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal useSearch()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal query()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Withdrawal|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Withdrawal extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\WithdrawalCurrency
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property bool $is_active
     * @property string|null $ticker_symbol
     * @property string $name
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereTickerSymbol($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency query()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency clone()
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|WithdrawalCurrency|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class WithdrawalCurrency extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}